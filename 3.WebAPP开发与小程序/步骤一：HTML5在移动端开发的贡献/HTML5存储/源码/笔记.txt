localStorage 
临时储存 

setItem(key,value)
getItem(key);

对象[key]=value
对象.key=value


removeItem(key) 删除key

clear()
可以直接把所有的key 都清空


length 
直接可以查看储存的个数

localStorage 没有储存时间
sessionStorage 网页会话结束时失效
网页关闭时失效 、 刷新没有问题

只能储存字符串

HTML5 - 数据库
indexedDB

先会创建数据库
indexedDB.open('随便起个名字',版本号)

就可以找到这个创建的数据库

onsuccess 数据库创建或打开成功
onerror 打开失败 （版本号不能降低）
onupgradeneeded 版本升级时触发的函数

createObjectStore 创建一个表


自动递增的 - createObjectStore 表里面递增


{autoIncrement: true}
{keyPath:数据中的字段}


模式两种

readwrite   读写模式
readonly    只能读不能写

add 添加 readonly 是报错的
get 里面放入key值就可以的
getAll 可以获取所有的表中的数据 result 是以数组的形式表现

put 继续添加数据
delete 删除某一条数据 参数就是key值
clear 删除所有的数据

onsuccess  如果指令成功了执行的回调函数
result     可以看到相关的数据



索引
store.createIndex(表名称,数据key值,{unique:true});
唯一性


var index = store.index(表的名称)get(key值的名称).onsuccess = function(){
	e.target.result 找到的数据的内容
}

游标
var requestNode = store.openCursor(IDBKeyRange.only(200));
IDBKeyRange.only//参数一是范围
upperBound // 小于等于之前的 true 不包含自己的  false 包含自己的
lowerBound // 大于等于之前的 true 不包含自己的  false 包含自己的
bound 参数1 大于等于的 参数2 小于等于的 如果有参数 3 和 4 就是true 和 false
true 不包含自己的  false 包含自己的
参数3 对应着参数1 参数4 对应着参数2


requestNode.onsuccess = function(){
	console.log(requestNode.result.value)
	//最后获取的值
};


结合使用
var index = store.index('test3');
var requestNode = index.openCursor(IDBKeyRange.upperBound(31));

update()更新数据
delete()删除数据



















